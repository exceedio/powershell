#Requires -Version 5.1

<#
    .SYNOPSIS
        Updates nsclient.ini on the local system based on the current system
        attributes and configuration
    .DESCRIPTION
        This script will dynamically determine which monitors need to be active
        on a system and configure the nsclient.ini on the local system thusly.
    .EXAMPLE
        PS C:\> Update-NSClientIni.ps1
    .EXAMPLE
        PS C:\> irm https://raw.githubusercontent.com/exceedio/powershell/master/Update-NSClientIni.ps1 | iex
    .PARAMETER NSClientIni
        The path to write to and/or the path of the existing nsclient.ini file.
        Defaults to C:\Program Files\NSClient\nsclient.ini if omitted.
    .PARAMETER Hostname
        The hostname of the local system to be used in the nsclient.ini file.
        Does not necessarily need to correspond to the actual hostname of the
        system. If omitted it will default to the hostname in the existing
        nsclient.ini at the location specified by the NSClientIni parameter.
    .PARAMETER EncryptionKey
        The password to use when AES encrypting data to be sent to the server
        specified by the Address parameter. If omitted it will default to the
        password in the existing nsclient.ini at the location specified by the
        NSClientIni parameter.
    .PARAMETER Address
        The network address (name or IP) of the Icinga server. If omitted it
        will default to the address in the existing nsclient.ini at the location
        specified by the NSClientIni parameter.
#>

[CmdletBinding()]
param(

    [Parameter(Mandatory=$false)]
    [string]
    $NSClientIni = "C:\Program Files\NSClient++\nsclient.ini",

    [Parameter(Mandatory=$false)]
    [string]
    $Hostname,

    [Parameter(Mandatory=$false)]
    [string]
    $EncryptionKey,

    [Parameter(Mandatory=$false)]
    [string]
    $Address
)

function Find-Value
{
    param (
        [string[]] $Content,
        [string] $Pattern
    )

    (($Content | Select-String -Pattern $Pattern) -replace $Pattern, '').Trim()
}

function Get-ServiceFilter
{
    $servicesToIgnoreLike = @(
        'GoogleUpdaterService',
        'GoogleUpdaterInternalService',
        'cbdhsvc_',
        'CDPUserSvc_',
        'clr_optimization_v',
        'OneSyncSvc_',
        'WpnUserService_'
    )

    $servicesToIgnoreExact = @(
        'BITS',
        'CDPSvc',
        'dbupdate',
        'DoSvc',
        'edgeupdate',
        'GISvc',
        'gpsvc',
        'gupdate',
        'IaasVmProvider',
        'iDRAC Service Module',
        'IntelAudioService',
        'Intel(R) TPM Provisioning Service',
        'MapsBroker',
        'MMCSS',
        'Net Driver HPZ12',
        'Pml Driver HPZ12',
        'RemoteRegistry',
        'ShellHWDetection',
        'sppsvc',
        'StateRepository',
        'SysmonLog',
        'TabletInputService',
        'tiledatamodelsvc',
        'TrustedInstaller',
        'VSS',
        'WbioSrvc',
        'wuauserv'
    )

    $serviceFilter = @(
        "start_type='auto'"
    )

    $servicesToIgnoreLike | ForEach-Object {
        $serviceFilter += "and name not like '$_'"
    }

    $serviceFilter += "and name not in ($(($servicesToIgnoreExact | ForEach-Object {"'$_'"}) -join ','))"

    $serviceFilter
}

if (-not (Test-Path $NSClientIni))
{
    Write-Warning "$NSClientIni does not exist!"
    return
}

if (@($Hostname, $EncryptionKey, $Address) | ForEach-Object {$_ -eq $null -or [string]::IsNullOrWhiteSpace($_)})
{
    $currentIni = Get-Content $NSClientIni

    if (-not $Hostname)
    {
        $Hostname = Find-Value -Content $currentIni -Pattern 'hostname='
    }
    if (-not $EncryptionKey)
    {
        $EncryptionKey = Find-Value -Content $currentIni -Pattern 'password='
    }
    if (-not $Address)
    {
        $Address = Find-Value -Content $currentIni -Pattern 'address='
    }
}

#
# here's where we start building the content of the new nsclient.ini
# file including comments at the top about the fact that the file was
# generated and it includes some information about when it was updated
#
$updatedIni = @()
$updatedIni += "; "
$updatedIni += "; NSClient++ passive host configuration file"
$updatedIni += "; "
$updatedIni += "; This file was automatically generated by a PowerShell script"
$updatedIni += "; named Update-NSClientIni.ps1 that is located in the Github"
$updatedIni += "; repository at https://github.com/exceedio/powershell."
$updatedIni += "; "
$updatedIni += "; Do not manually edit this file. Re-run the PowerShell script"
$updatedIni += "; to regenerate the file when needed."
$updatedIni += "; "
$updatedIni += "; Updated: $(Get-Date)"
$updatedIni += "; "
$updatedIni += ""
$updatedIni += "[/modules]"
$updatedIni += ""
$updatedIni += "CheckSystem=enabled"
$updatedIni += "CheckDisk=enabled"
$updatedIni += "CheckTaskSched=enabled"
$updatedIni += "CheckHelpers=enabled"
$updatedIni += "CheckEventLog=enabled"
$updatedIni += "CheckExternalScripts=enabled"
$updatedIni += "Scheduler=enabled"
$updatedIni += "NSCAClient=enabled"
$updatedIni += ""
$updatedIni += "[/settings/NSCA/client]"
$updatedIni += ""
$updatedIni += "delay=0"
$updatedIni += "hostname=$Hostname"
$updatedIni += "channel=NSCA"
$updatedIni += ""
$updatedIni += "[/settings/external scripts]"
$updatedIni += ""
$updatedIni += "allow arguments = true"
$updatedIni += "allow nasty characters = true"
$updatedIni += "timeout = 90"
$updatedIni += ""
$updatedIni += "[/settings/external scripts/wrappings]"
$updatedIni += ""
$updatedIni += "bat = scripts\\%SCRIPT% %ARGS%"
$updatedIni += 'ps1 = cmd /c echo scripts\\%SCRIPT% %ARGS%; exit($lastexitcode) | @powershell -noprofile -executionpolicy unrestricted -command -'
$updatedIni += "vbs = cscript.exe //t:90 //nologo scripts\\lib\\wrapper.vbs %SCRIPT% %ARGS%"
$updatedIni += "exe = cmd /c %SCRIPT% %ARGS%"
$updatedIni += ""
$updatedIni += "[/settings/external scripts/scripts]"
$updatedIni += ""
$updatedIni += "check_omsa=scripts/check_openmanage.exe --timeout 60"
$updatedIni += ""
$updatedIni += "[/settings/external scripts/wrapped scripts]"
$updatedIni += ""
$updatedIni += "check_printers=check_printers.vbs"
$updatedIni += "check_time=check_windows_time.bat time.google.com 120 300"
$updatedIni += "check_wsb=check_wsb.ps1"
$updatedIni += 'check_icmp=check_icmp.ps1 -Targets $ARG1$'
$updatedIni += ""
$updatedIni += "[/settings/NSCA/client/targets/default]"
$updatedIni += ""
$updatedIni += "encryption=aes"
$updatedIni += "password=$EncryptionKey"
$updatedIni += "address=$Address"
$updatedIni += "port=5667"
$updatedIni += "timeout=180"
$updatedIni += ""
$updatedIni += "[/settings/log]"
$updatedIni += ""
$updatedIni += ";debug=1"
$updatedIni += ""
$updatedIni += "[/settings/log/file]"
$updatedIni += ""
$updatedIni += "file=C:\Program Files\NSClient++\nsclient.log"
$updatedIni += "max size=10485760"
$updatedIni += ""
$updatedIni += "[/settings/scheduler/schedules/default]"
$updatedIni += ""
$updatedIni += "channel=NSCA"
$updatedIni += "interval=15m"
$updatedIni += "report=all"
$updatedIni += ""
$updatedIni += "[/settings/scheduler/schedules]"
$updatedIni += ""
$updatedIni += "cpu = check_cpu ""warn=load>85"" ""crit=load>95"" time=15m"
$updatedIni += "disk = check_drivesize ""warn=free<10%"" ""crit=free<2%"" drive=all-volumes"
$updatedIni += "mem = check_memory ""warn=used>95%"" ""crit=none"""
$updatedIni += "service = check_service ""filter=$(Get-ServiceFilter)"""
$updatedIni += "uptime = check_uptime ""warn=uptime<12h"" ""crit=uptime<30m"""
$updatedIni += ""
$updatedIni += "[/settings/scheduler/schedules/checkin]"
$updatedIni += ""
$updatedIni += "interval=1m"
$updatedIni += "alias=checkin"
$updatedIni += "command=check_ok"

if (Get-Printer | Where-Object Shared -eq $true)
{
    #
    # local system is sharing at least one printer so we're going
    # to assume that we're a print server and check printer status
    # every one hour
    #
    $updatedIni += ""
    $updatedIni += "[/settings/scheduler/schedules/printers]"
    $updatedIni += ""
    $updatedIni += "interval=1h"
    $updatedIni += "alias=printers"
    $updatedIni += "command=check_printers"
}

if (Test-Path -Path 'C:\Program Files\Dell\SysMgt\oma\bin\omreport.exe')
{
    #
    # local system has Dell management components installed so we're
    # going to check status of Dell hardware components every three
    # hours
    #
    $updatedIni += ""
    $updatedIni += "[/settings/scheduler/schedules/omsa]"
    $updatedIni += ""
    $updatedIni += "interval=3h"
    $updatedIni += "alias=omsa"
    $updatedIni += "command=check_omsa"
}

if (@(4,5) -contains (Get-CimInstance -ClassName Win32_ComputerSystem).DomainRole)
{
    #
    # local system is a domain controller so we're going to check that
    # the clock is in sync with a known good source of time every 24
    # hours. If you get too aggressive with checking this information
    # you will be blocked by the time source due to throttling
    #
    $updatedIni += ""
    $updatedIni += "[/settings/scheduler/schedules/time]"
    $updatedIni += ""
    $updatedIni += "interval=24h"
    $updatedIni += "alias=time"
    $updatedIni += "command=check_time"
}

#
# create a backup of the existing nsclient.ini file
#
Copy-Item `
    -Path $NSClientIni `
    -Destination "$NSClientIni.backup-$(Get-Date -Format "yyyyMMdd")" `
    -Force

#
# save the new nsclient.ini file using utf8 encoding
#
$updatedIni -join "`n" | Out-File `
    -FilePath $NSClientIni `
    -Encoding utf8 `
    -Force

#
# if the nscp service exists and it is running then restart it
# to pick up the changes in the new nsclient.ini file. it would
# be nice to check to see if anything has changed in the file
#
if ($service = Get-Service nscp)
{
    if ($service.Status -eq 'Running')
    {
        $service | Restart-Service
    }
}

