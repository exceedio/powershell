#Requires -Version 5.1
#Requires -Modules Microsoft.Graph.Authentication, Microsoft.Graph.Reports

<#
.SYNOPSIS
    Gets a list of Azure AD sign ins using legacy authentication.
.DESCRIPTION
    You can use the list generated by this script to track down users that might be
    using legacy authentication protocols such as ActiveSync or SMTP to authenticate
    to Azure AD and get them on to a modern authentication client before disabling
    legacy authentication for the tenant.
.PARAMETER TenantId
    The Azure AD Tenant ID that can be obtained from the Overview blade of the Azure
    AD portal.
.PARAMETER ClientId
    The Application (client) ID of your app registration that is registered in your
    Azure AD instance. The app requires at least User.Read and AuditLog.Read.All
    delegated permissions for Microsoft Graph.
.PARAMETER Scopes
    The Graph API permissions required for this script. You shouldn't need to use this.
.EXAMPLE
    iex ((new-object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/exceedio/powershell/master/Get-ExceedioLegacyAuthSigninLogs.ps1'))
.EXAMPLE
    .\Get-ExceedioLegacyAuthSigninLogs.ps1
.EXAMPLE
    .\Get-ExceedioLegacyAuthSigninLogs.ps1 -TenantId 430b6c3f-3d7b-45cb-8bc1-f745acf4df74 -ClientId b133e7d1-8a79-49a0-a001-fdf82aee3081
.EXAMPLE
    .\Get-ExceedioLegacyAuthSigninLogs.ps1 -StayConnectedToGraphAPIWhenFinished
.NOTES
    Filename : Get-ExceedioLegacyAuthSigninLogs.ps1
    Author   : jreese@exceedio.com
    Modified : May 18, 2022
#>

[CmdletBinding()]
param (
    [Parameter(Mandatory = $true, HelpMessage='Enter the Azure AD Tenent ID from Overview blade in portal')]
    [ValidateNotNullOrEmpty()]
    [String]
    $TenantId,
    [Parameter(Mandatory = $true, HelpMessage='Enter application (client) ID of Azure AD registered app with permissions to read multi-tenant logs')]
    [ValidateNotNullOrEmpty()]
    [String]
    $ClientId,
    [Parameter(Mandatory = $false)]
    [String[]]
    $Scopes = @('User.Read', 'AuditLog.Read.All'),
    [Parameter(Mandatory = $false)]
    [Switch]
    $StayConnectedToGraphAPIWhenFinished = $false
)

if ($null -eq (Get-MgContext)) {
    Connect-MgGraph -TenantId $TenantId -ClientId $ApplicationId -Scopes $Scopes | Out-Null
}

$dateStart = (Get-Date).AddDays(-30).ToString("yyyy-MM-ddTHH:mm:ssZ")
$legacyAuthSignInsFilter = "CreatedDateTime gt $dateStart and ClientAppUsed ne 'Browser' and ClientAppUsed ne 'Mobile Apps and Desktop clients'"
$legacyAuthSignIns = Get-MgAuditLogSignIn -Filter $legacyAuthSignInsFilter
$activeSyncSignIns = $legacyAuthSignIns | Where-Object { $_.ClientAppUsed -eq 'Exchange ActiveSync' }
$activeSyncSignIns | Sort-Object CreatedDateTime | Format-Table CreatedDateTime,ClientAppUsed,UserPrincipalName,IPAddress
Write-Host "The above users are likely using the built-in mail app on their mobile device. They need to be switched to Outlook to continue." -ForegroundColor Yellow
Write-Host "Here is a list of unique users, just in case the list above is long:"
$activeSyncSignIns | Select-Object UserPrincipalName | Get-Unique

if (-not $StayConnectedToGraphAPIWhenFinished) {
    Disconnect-MgGraph
}